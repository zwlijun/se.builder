<!DOCTYPE html>
<html>
    <meta charset="utf-8">
    <head>
        <style>
            p { height: 30px; width: 150px; background-color: #ccf; }
            div {height: 30px; width: 150px; background-color: #cfc; }
        </style>
    </head>
    <body>
        <div>
            <p>paragraph</p>
        </div>
        <script>
            document.querySelector("p").addEventListener("click", function(event)
            {   
                event.preventDefault();
                console.info("我是p元素上被绑定的第一个监听函数");
            }, false);
            // document.querySelector("p").addEventListener("click", function(event)
            // {
            //     console.info("我是p元素上被绑定的第二个监听函数");
            //     // event.stopImmediatePropagation();
            //     //执行stopImmediatePropagation方法,阻止click事件冒泡,并且阻止p元素上绑定的其他click事件的事件监听函数的执行.
            // }, false);
            document.querySelector("p").addEventListener("mousedown", function(event)
            {
                event.preventDefault();
                console.info("我是p元素上被绑定的第三个监听函数");
                //该监听函数排在上个函数后面,该函数不会被执行.
            }, false);
            // document.querySelector("div").addEventListener("click", function(event)
            // {
            //     console.info("我是div元素,我是p元素的上层元素");
            //     //p元素的click事件没有向上冒泡,该函数不会被执行.
            // }, false);
            

            function delay(ms, handler){
                var callback = handler.callback;

                if(callback.tid){
                    clearTimeout(callback.tid);
                    callback.tid = undefined;
                }

                callback.tid = setTimeout(function(){
                    callback.apply(null, [callback.tid])
                }, ms);
            }

            var handler = {
                    callback: function(tid){
                        console.info("A: " + tid)
                    }
                };

            function A(){
                delay(1000, handler);
            }

            A();
            A();
            A();

            delay(2000, {
                callback: function(tid){
                    console.info("B: " + tid)
                }
            });

            var B_COUNT = [0, 0, 0];
            var B = function(index){
                if(B_COUNT[index] < 10){
                    setTimeout(function(){
                       B_COUNT[index]++;
                       console.info(index + ": " + B_COUNT[index])
                       B(index)
                    }, 16);
                }
            }

            B(0);
            B(1);
            B(2);

        </script>
    </body>
</html>